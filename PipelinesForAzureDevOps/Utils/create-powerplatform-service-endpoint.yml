# Pipeline used to create of a Power Platform service endpoint

# Variables to create
# EnvironmentName - String - Not secret - Let user override
# TenantId - String - Secret - Do not let user override
# ApplicationId - String - Secret - Do not let user override
# ClientSecret - String - Secret - Do not let user override
# PowerPlatformEnvironmentURL - String - Not secret - Let user override
# AzureDevOpsOrganizationURL - String - Secret - Do not let user override
# PatToken - String - Secret - Do not let user override

trigger: none

variables:
  # Full name of the targeted branch, extracted from 'Build.SourceBranch' or 'System.PullRequest.SourceBranch' predefined variables
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    BranchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    BranchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
  
  # Replace " " by "-" in EnvironmentName variable
  customEnvironmentName: $[ replace(variables['EnvironmentName'], ' ', '-') ]

stages:
# Stage for the generation of the request body file for the creation of the Power Platform service endpoint
- stage: 'RequestBodyFileGeneration'
  displayName: 'Request Body File Generation'
  jobs:
    - job: 'RequestBodyFileGeneration'
      displayName: 'RequestBodyFileGeneration job'
      pool:
        vmImage: 'windows-2019'

      steps:
      # Call to the pipeline template for the generation of the request body file for the creation of the Power Platform service endpoint
      - template: ../Templates/generate-powerplatform-service-endpoint-request-body-template.yml
        parameters:
          ENVIRONMENT_NAME: '$(customEnvironmentName)'
          TENANT_ID: '$(TenantId)'
          APPLICATION_ID: '$(ApplicationId)'
          CLIENT_SECRET: '$(ClientSecret)'
          POWER_PLATFORM_ENVIRONMENT_URL: '$(PowerPlatformEnvironmentURL)'
          BRANCH_NAME: '$(BranchName)'
          CURRENT_PROJECT_ID: '$(System.TeamProjectId)'
          CURRENT_PROJECT_NAME: '$(System.TeamProject)'

# Stage for the creation of the Power Platform service endpoint
- stage: 'ServiceEndpointCreation'
  displayName: 'Service Endpoint Creation'
  jobs:
    - job: 'ServiceEndpointCreation'
      displayName: 'ServiceEndpointCreation job'
      pool:
        vmImage: 'windows-2019'

      steps:
      # Call to the pipeline template for the creation of the Power Platform service endpoint
      - template: ../Templates/create-powerplatform-service-endpoint-template.yml
        parameters:
          AZURE_DEVOPS_ORGANIZATION_URL: '$(AzureDevOpsOrganizationURL)'
          ENVIRONMENT_NAME: '$(customEnvironmentName)'
          BRANCH_NAME: '$(BranchName)'
          PAT_TOKEN: '$(PatToken)'
          CURRENT_PROJECT_ID: '$(System.TeamProjectId)'

# Stage for the deletion of the request body file for the creation of the Power Platform service endpoint
- stage: 'RequestBodyFileDeletion'
  displayName: 'Service Endpoint Deletion'
  jobs:
    - job: 'RequestBodyFileDeletion'
      displayName: 'RequestBodyFileDeletion job'
      pool:
        vmImage: 'windows-2019'

      steps:
      # Pull the last changes made to the branch (file with the request body for the creation of the Power Platform service endpoint)
      - task: CmdLine@2
        inputs:
          script: |
            echo pull all changes from remote branch
            git config user.email "$(Email)"
            git config user.name "Automatic Build"

            echo branch full name $(BranchName)
            git checkout $(BranchName)
            git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull

      # Delete directory containing
      - powershell: |
          Remove-Item $(System.DefaultWorkingDirectory)/ServiceEndpoints/ServiceEndpointCreation_RequestBodies/powerplatform-spn-$(customEnvironmentName).json

      # Commit the changes (deletion of the file with the request body for the creation of the Power Platform service endpoint) to the considered branch
      - task: CmdLine@2
        inputs:
          script: |
            echo commit all changes
            git config user.email "$(Email)"
            git config user.name "Automatic Build"

            echo branch full name $(BranchName)
            git checkout $(BranchName)
            git add --all
            git commit -m "Power Platform service endpoint creation request body file deletion"
              
            echo push code to new repo
            git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin $(BranchName)